/**
 * BackendConnectionTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import {TagAbstract, HttpRequest} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {BackendConnection} from "./BackendConnection";
import {BackendConnectionCollection} from "./BackendConnectionCollection";
import {BackendConnectionCreate} from "./BackendConnectionCreate";
import {BackendConnectionIndex} from "./BackendConnectionIndex";
import {BackendConnectionIntrospectionEntities} from "./BackendConnectionIntrospectionEntities";
import {BackendConnectionIntrospectionEntity} from "./BackendConnectionIntrospectionEntity";
import {BackendConnectionRedirectResponse} from "./BackendConnectionRedirectResponse";
import {BackendConnectionUpdate} from "./BackendConnectionUpdate";
import {CommonFormContainer} from "./CommonFormContainer";
import {CommonMessage} from "./CommonMessage";
import {CommonMessageException} from "./CommonMessageException";

export class BackendConnectionTag extends TagAbstract {
    /**
     * @returns {Promise<CommonMessage>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async create(payload: BackendConnectionCreate): Promise<CommonMessage> {
        const url = this.parser.url('/backend/connection', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as CommonMessage;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * @returns {Promise<CommonMessage>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async delete(connectionId: string): Promise<CommonMessage> {
        const url = this.parser.url('/backend/connection/$connection_id<[0-9]+|^~>', {
            'connection_id': connectionId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'DELETE',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as CommonMessage;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * @returns {Promise<BackendConnection>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async get(connectionId: string): Promise<BackendConnection> {
        const url = this.parser.url('/backend/connection/$connection_id<[0-9]+|^~>', {
            'connection_id': connectionId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendConnection;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * @returns {Promise<BackendConnectionCollection>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getAll(startIndex?: number, count?: number, search?: string): Promise<BackendConnectionCollection> {
        const url = this.parser.url('/backend/connection', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'startIndex': startIndex,
                'count': count,
                'search': search,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendConnectionCollection;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * @returns {Promise<BackendConnectionIndex>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getClasses(): Promise<BackendConnectionIndex> {
        const url = this.parser.url('/backend/connection/list', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendConnectionIndex;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * @returns {Promise<CommonFormContainer>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getForm(_class?: string): Promise<CommonFormContainer> {
        const url = this.parser.url('/backend/connection/form', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'class': _class,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as CommonFormContainer;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * @returns {Promise<BackendConnectionIntrospectionEntities>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getIntrospection(connectionId: string): Promise<BackendConnectionIntrospectionEntities> {
        const url = this.parser.url('/backend/connection/$connection_id<[0-9]+|^~>/introspection', {
            'connection_id': connectionId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendConnectionIntrospectionEntities;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * @returns {Promise<BackendConnectionIntrospectionEntity>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getIntrospectionForEntity(connectionId: string, entity: string): Promise<BackendConnectionIntrospectionEntity> {
        const url = this.parser.url('/backend/connection/$connection_id<[0-9]+|^~>/introspection/:entity', {
            'connection_id': connectionId,
            'entity': entity,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendConnectionIntrospectionEntity;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * @returns {Promise<BackendConnectionRedirectResponse>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getRedirect(connectionId: string): Promise<BackendConnectionRedirectResponse> {
        const url = this.parser.url('/backend/connection/$connection_id<[0-9]+|^~>/redirect', {
            'connection_id': connectionId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendConnectionRedirectResponse;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * @returns {Promise<CommonMessage>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async update(connectionId: string, payload: BackendConnectionUpdate): Promise<CommonMessage> {
        const url = this.parser.url('/backend/connection/$connection_id<[0-9]+|^~>', {
            'connection_id': connectionId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as CommonMessage;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }



}
