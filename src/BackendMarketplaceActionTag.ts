/**
 * BackendMarketplaceActionTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import {TagAbstract, HttpRequest} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {CommonMessage} from "./CommonMessage";
import {CommonMessageException} from "./CommonMessageException";
import {MarketplaceAction} from "./MarketplaceAction";
import {MarketplaceActionCollection} from "./MarketplaceActionCollection";
import {MarketplaceInstall} from "./MarketplaceInstall";
import {MarketplaceMessage} from "./MarketplaceMessage";

export class BackendMarketplaceActionTag extends TagAbstract {
    /**
     * Returns a specific marketplace action
     *
     * @returns {Promise<MarketplaceAction>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async get(user: string, name: string): Promise<MarketplaceAction> {
        const url = this.parser.url('/backend/marketplace/action/:user/:name', {
            'user': user,
            'name': name,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as MarketplaceAction;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns a paginated list of marketplace actions
     *
     * @returns {Promise<MarketplaceActionCollection>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getAll(startIndex?: number, query?: string): Promise<MarketplaceActionCollection> {
        const url = this.parser.url('/backend/marketplace/action', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'startIndex': startIndex,
                'query': query,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as MarketplaceActionCollection;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * @returns {Promise<MarketplaceMessage>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async install(payload: MarketplaceInstall): Promise<MarketplaceMessage> {
        const url = this.parser.url('/backend/marketplace/action', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as MarketplaceMessage;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * @returns {Promise<CommonMessage>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async upgrade(user: string, name: string): Promise<CommonMessage> {
        const url = this.parser.url('/backend/marketplace/action/:user/:name', {
            'user': user,
            'name': name,
        });

        let request: HttpRequest = {
            url: url,
            method: 'PUT',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as CommonMessage;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }



}
