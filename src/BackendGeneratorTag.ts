/**
 * BackendGeneratorTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import {TagAbstract, HttpRequest} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {BackendGeneratorIndexProviders} from "./BackendGeneratorIndexProviders";
import {BackendGeneratorProvider} from "./BackendGeneratorProvider";
import {BackendGeneratorProviderChangelog} from "./BackendGeneratorProviderChangelog";
import {BackendGeneratorProviderConfig} from "./BackendGeneratorProviderConfig";
import {CommonFormContainer} from "./CommonFormContainer";
import {CommonMessage} from "./CommonMessage";
import {CommonMessageException} from "./CommonMessageException";

export class BackendGeneratorTag extends TagAbstract {
    /**
     * @returns {Promise<CommonMessage>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async executeProvider(provider: string, payload: BackendGeneratorProvider): Promise<CommonMessage> {
        const url = this.parser.url('/backend/generator/:provider', {
            'provider': provider,
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as CommonMessage;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * @returns {Promise<BackendGeneratorProviderChangelog>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getChangelog(provider: string, payload: BackendGeneratorProviderConfig): Promise<BackendGeneratorProviderChangelog> {
        const url = this.parser.url('/backend/generator/:provider', {
            'provider': provider,
        });

        let request: HttpRequest = {
            url: url,
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendGeneratorProviderChangelog;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns all available generator classes
     *
     * @returns {Promise<BackendGeneratorIndexProviders>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getClasses(): Promise<BackendGeneratorIndexProviders> {
        const url = this.parser.url('/backend/generator', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendGeneratorIndexProviders;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns the generator config form
     *
     * @returns {Promise<CommonFormContainer>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getForm(provider: string): Promise<CommonFormContainer> {
        const url = this.parser.url('/backend/generator/:provider', {
            'provider': provider,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as CommonFormContainer;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }



}
