/**
 * TransactionTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import axios, {AxiosRequestConfig} from "axios";
import {TagAbstract} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {Transaction} from "./Transaction";
import {TransactionCollection} from "./TransactionCollection";

export class TransactionTag extends TagAbstract {
    /**
     * @returns {Promise<Transaction>}
     * @throws {ClientException}
     */
    public async get(transactionId: string): Promise<Transaction> {
        const url = this.parser.url('/backend/transaction/$transaction_id<[0-9]+>', {
            'transaction_id': transactionId,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'GET',
            params: this.parser.query({
            }),
        };

        try {
            const response = await this.httpClient.request<Transaction>(params);
            return response.data;
        } catch (error) {
            if (axios.isAxiosError(error) && error.response) {
                switch (error.response.status) {
                    default:
                        throw new UnknownStatusCodeException('The server returned an unknown status code');
                }
            }

            throw new ClientException('An unknown error occurred: ' + String(error));
        }
    }

    /**
     * @returns {Promise<TransactionCollection>}
     * @throws {ClientException}
     */
    public async getAll(startIndex?: number, count?: number, search?: string, from?: string, to?: string, planId?: number, userId?: number, appId?: number, status?: string, provider?: string): Promise<TransactionCollection> {
        const url = this.parser.url('/backend/transaction', {
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'GET',
            params: this.parser.query({
                'startIndex': startIndex,
                'count': count,
                'search': search,
                'from': from,
                'to': to,
                'planId': planId,
                'userId': userId,
                'appId': appId,
                'status': status,
                'provider': provider,
            }),
        };

        try {
            const response = await this.httpClient.request<TransactionCollection>(params);
            return response.data;
        } catch (error) {
            if (axios.isAxiosError(error) && error.response) {
                switch (error.response.status) {
                    default:
                        throw new UnknownStatusCodeException('The server returned an unknown status code');
                }
            }

            throw new ClientException('An unknown error occurred: ' + String(error));
        }
    }


}
