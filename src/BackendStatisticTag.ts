/**
 * BackendStatisticTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import {TagAbstract, HttpRequest} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {BackendStatisticChart} from "./BackendStatisticChart";
import {BackendStatisticCount} from "./BackendStatisticCount";
import {CommonMessage} from "./CommonMessage";
import {CommonMessageException} from "./CommonMessageException";

export class BackendStatisticTag extends TagAbstract {
    /**
     * Returns a statistic containing the activities per user
     *
     * @returns {Promise<BackendStatisticChart>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getActivitiesPerUser(startIndex?: number, count?: number, search?: string, from?: string, to?: string, operationId?: number, appId?: number, userId?: number, ip?: string, userAgent?: string, method?: string, path?: string, header?: string, body?: string): Promise<BackendStatisticChart> {
        const url = this.parser.url('/backend/statistic/activities_per_user', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'startIndex': startIndex,
                'count': count,
                'search': search,
                'from': from,
                'to': to,
                'operationId': operationId,
                'appId': appId,
                'userId': userId,
                'ip': ip,
                'userAgent': userAgent,
                'method': method,
                'path': path,
                'header': header,
                'body': body,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendStatisticChart;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns a statistic containing the request count
     *
     * @returns {Promise<BackendStatisticCount>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getCountRequests(startIndex?: number, count?: number, search?: string, from?: string, to?: string, operationId?: number, appId?: number, userId?: number, ip?: string, userAgent?: string, method?: string, path?: string, header?: string, body?: string): Promise<BackendStatisticCount> {
        const url = this.parser.url('/backend/statistic/count_requests', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'startIndex': startIndex,
                'count': count,
                'search': search,
                'from': from,
                'to': to,
                'operationId': operationId,
                'appId': appId,
                'userId': userId,
                'ip': ip,
                'userAgent': userAgent,
                'method': method,
                'path': path,
                'header': header,
                'body': body,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendStatisticCount;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns a statistic containing the errors per operation
     *
     * @returns {Promise<BackendStatisticChart>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getErrorsPerOperation(startIndex?: number, count?: number, search?: string, from?: string, to?: string, operationId?: number, appId?: number, userId?: number, ip?: string, userAgent?: string, method?: string, path?: string, header?: string, body?: string): Promise<BackendStatisticChart> {
        const url = this.parser.url('/backend/statistic/errors_per_operation', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'startIndex': startIndex,
                'count': count,
                'search': search,
                'from': from,
                'to': to,
                'operationId': operationId,
                'appId': appId,
                'userId': userId,
                'ip': ip,
                'userAgent': userAgent,
                'method': method,
                'path': path,
                'header': header,
                'body': body,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendStatisticChart;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns a statistic containing the incoming requests
     *
     * @returns {Promise<BackendStatisticChart>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getIncomingRequests(startIndex?: number, count?: number, search?: string, from?: string, to?: string, operationId?: number, appId?: number, userId?: number, ip?: string, userAgent?: string, method?: string, path?: string, header?: string, body?: string): Promise<BackendStatisticChart> {
        const url = this.parser.url('/backend/statistic/incoming_requests', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'startIndex': startIndex,
                'count': count,
                'search': search,
                'from': from,
                'to': to,
                'operationId': operationId,
                'appId': appId,
                'userId': userId,
                'ip': ip,
                'userAgent': userAgent,
                'method': method,
                'path': path,
                'header': header,
                'body': body,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendStatisticChart;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns a statistic containing the incoming transactions
     *
     * @returns {Promise<BackendStatisticChart>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getIncomingTransactions(startIndex?: number, count?: number, search?: string, from?: string, to?: string, operationId?: number, appId?: number, userId?: number, ip?: string, userAgent?: string, method?: string, path?: string, header?: string, body?: string): Promise<BackendStatisticChart> {
        const url = this.parser.url('/backend/statistic/incoming_transactions', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'startIndex': startIndex,
                'count': count,
                'search': search,
                'from': from,
                'to': to,
                'operationId': operationId,
                'appId': appId,
                'userId': userId,
                'ip': ip,
                'userAgent': userAgent,
                'method': method,
                'path': path,
                'header': header,
                'body': body,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendStatisticChart;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns a statistic containing the issues tokens
     *
     * @returns {Promise<BackendStatisticChart>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getIssuedTokens(startIndex?: number, count?: number, search?: string, from?: string, to?: string, operationId?: number, appId?: number, userId?: number, ip?: string, userAgent?: string, method?: string, path?: string, header?: string, body?: string): Promise<BackendStatisticChart> {
        const url = this.parser.url('/backend/statistic/issued_tokens', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'startIndex': startIndex,
                'count': count,
                'search': search,
                'from': from,
                'to': to,
                'operationId': operationId,
                'appId': appId,
                'userId': userId,
                'ip': ip,
                'userAgent': userAgent,
                'method': method,
                'path': path,
                'header': header,
                'body': body,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendStatisticChart;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns a statistic containing the most used activities
     *
     * @returns {Promise<BackendStatisticChart>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getMostUsedActivities(startIndex?: number, count?: number, search?: string, from?: string, to?: string, operationId?: number, appId?: number, userId?: number, ip?: string, userAgent?: string, method?: string, path?: string, header?: string, body?: string): Promise<BackendStatisticChart> {
        const url = this.parser.url('/backend/statistic/most_used_activities', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'startIndex': startIndex,
                'count': count,
                'search': search,
                'from': from,
                'to': to,
                'operationId': operationId,
                'appId': appId,
                'userId': userId,
                'ip': ip,
                'userAgent': userAgent,
                'method': method,
                'path': path,
                'header': header,
                'body': body,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendStatisticChart;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns a statistic containing the most used apps
     *
     * @returns {Promise<BackendStatisticChart>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getMostUsedApps(startIndex?: number, count?: number, search?: string, from?: string, to?: string, operationId?: number, appId?: number, userId?: number, ip?: string, userAgent?: string, method?: string, path?: string, header?: string, body?: string): Promise<BackendStatisticChart> {
        const url = this.parser.url('/backend/statistic/most_used_apps', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'startIndex': startIndex,
                'count': count,
                'search': search,
                'from': from,
                'to': to,
                'operationId': operationId,
                'appId': appId,
                'userId': userId,
                'ip': ip,
                'userAgent': userAgent,
                'method': method,
                'path': path,
                'header': header,
                'body': body,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendStatisticChart;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns a statistic containing the most used operations
     *
     * @returns {Promise<BackendStatisticChart>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getMostUsedOperations(startIndex?: number, count?: number, search?: string, from?: string, to?: string, operationId?: number, appId?: number, userId?: number, ip?: string, userAgent?: string, method?: string, path?: string, header?: string, body?: string): Promise<BackendStatisticChart> {
        const url = this.parser.url('/backend/statistic/most_used_operations', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'startIndex': startIndex,
                'count': count,
                'search': search,
                'from': from,
                'to': to,
                'operationId': operationId,
                'appId': appId,
                'userId': userId,
                'ip': ip,
                'userAgent': userAgent,
                'method': method,
                'path': path,
                'header': header,
                'body': body,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendStatisticChart;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns a statistic containing the test coverage
     *
     * @returns {Promise<BackendStatisticChart>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getTestCoverage(): Promise<BackendStatisticChart> {
        const url = this.parser.url('/backend/statistic/test_coverage', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendStatisticChart;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns a statistic containing the time average
     *
     * @returns {Promise<BackendStatisticChart>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getTimeAverage(startIndex?: number, count?: number, search?: string, from?: string, to?: string, operationId?: number, appId?: number, userId?: number, ip?: string, userAgent?: string, method?: string, path?: string, header?: string, body?: string): Promise<BackendStatisticChart> {
        const url = this.parser.url('/backend/statistic/time_average', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'startIndex': startIndex,
                'count': count,
                'search': search,
                'from': from,
                'to': to,
                'operationId': operationId,
                'appId': appId,
                'userId': userId,
                'ip': ip,
                'userAgent': userAgent,
                'method': method,
                'path': path,
                'header': header,
                'body': body,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendStatisticChart;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns a statistic containing the time per operation
     *
     * @returns {Promise<BackendStatisticChart>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getTimePerOperation(startIndex?: number, count?: number, search?: string, from?: string, to?: string, operationId?: number, appId?: number, userId?: number, ip?: string, userAgent?: string, method?: string, path?: string, header?: string, body?: string): Promise<BackendStatisticChart> {
        const url = this.parser.url('/backend/statistic/time_per_operation', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'startIndex': startIndex,
                'count': count,
                'search': search,
                'from': from,
                'to': to,
                'operationId': operationId,
                'appId': appId,
                'userId': userId,
                'ip': ip,
                'userAgent': userAgent,
                'method': method,
                'path': path,
                'header': header,
                'body': body,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendStatisticChart;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns a statistic containing the used points
     *
     * @returns {Promise<BackendStatisticChart>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getUsedPoints(startIndex?: number, count?: number, search?: string, from?: string, to?: string, operationId?: number, appId?: number, userId?: number, ip?: string, userAgent?: string, method?: string, path?: string, header?: string, body?: string): Promise<BackendStatisticChart> {
        const url = this.parser.url('/backend/statistic/used_points', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'startIndex': startIndex,
                'count': count,
                'search': search,
                'from': from,
                'to': to,
                'operationId': operationId,
                'appId': appId,
                'userId': userId,
                'ip': ip,
                'userAgent': userAgent,
                'method': method,
                'path': path,
                'header': header,
                'body': body,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendStatisticChart;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns a statistic containing the user registrations
     *
     * @returns {Promise<BackendStatisticChart>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getUserRegistrations(startIndex?: number, count?: number, search?: string, from?: string, to?: string, operationId?: number, appId?: number, userId?: number, ip?: string, userAgent?: string, method?: string, path?: string, header?: string, body?: string): Promise<BackendStatisticChart> {
        const url = this.parser.url('/backend/statistic/user_registrations', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'startIndex': startIndex,
                'count': count,
                'search': search,
                'from': from,
                'to': to,
                'operationId': operationId,
                'appId': appId,
                'userId': userId,
                'ip': ip,
                'userAgent': userAgent,
                'method': method,
                'path': path,
                'header': header,
                'body': body,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendStatisticChart;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }



}
