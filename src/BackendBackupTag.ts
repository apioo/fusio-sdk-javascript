/**
 * BackendBackupTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import axios, {AxiosRequestConfig} from "axios";
import {TagAbstract} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {BackendBackupExport} from "./BackendBackupExport";
import {BackendBackupImport} from "./BackendBackupImport";
import {BackendBackupImportResult} from "./BackendBackupImportResult";
import {CommonMessageException} from "./CommonMessageException";

export class BackendBackupTag extends TagAbstract {
    /**
     * @returns {Promise<BackendBackupImportResult>}
     * @throws {CommonMessageExceptionException}
     * @throws {ClientException}
     */
    public async import(payload: BackendBackupImport): Promise<BackendBackupImportResult> {
        const url = this.parser.url('/backend/backup/import', {
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'POST',
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        try {
            const response = await this.httpClient.request<BackendBackupImportResult>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                switch (error.response.status) {
                    case 401:
                        throw new CommonMessageException(error.response.data);
                    case 500:
                        throw new CommonMessageException(error.response.data);
                    default:
                        throw new UnknownStatusCodeException('The server returned an unknown status code');
                }
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * @returns {Promise<BackendBackupExport>}
     * @throws {CommonMessageExceptionException}
     * @throws {ClientException}
     */
    public async export(): Promise<BackendBackupExport> {
        const url = this.parser.url('/backend/backup/export', {
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'POST',
            params: this.parser.query({
            }, [
            ]),
        };

        try {
            const response = await this.httpClient.request<BackendBackupExport>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                switch (error.response.status) {
                    case 401:
                        throw new CommonMessageException(error.response.data);
                    case 500:
                        throw new CommonMessageException(error.response.data);
                    default:
                        throw new UnknownStatusCodeException('The server returned an unknown status code');
                }
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }


}
