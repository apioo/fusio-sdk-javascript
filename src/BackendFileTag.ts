/**
 * BackendFileTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import {TagAbstract, HttpRequest} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {BackendFileCollection} from "./BackendFileCollection";
import {CommonMessage} from "./CommonMessage";
import {CommonMessageException} from "./CommonMessageException";
import {Passthru} from "./Passthru";

export class BackendFileTag extends TagAbstract {
    /**
     * Uploads one or more files on the filesystem connection
     *
     * @returns {Promise<CommonMessage>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async create(connectionId: string, payload: FormData): Promise<CommonMessage> {
        const url = this.parser.url('/backend/file/:connection_id', {
            'connection_id': connectionId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as CommonMessage;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Deletes an existing file on the filesystem connection
     *
     * @returns {Promise<CommonMessage>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async delete(connectionId: string, fileId: string): Promise<CommonMessage> {
        const url = this.parser.url('/backend/file/:connection_id/:file_id', {
            'connection_id': connectionId,
            'file_id': fileId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'DELETE',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as CommonMessage;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns the content of the provided file id on the filesystem connection
     *
     * @returns {Promise<Passthru>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async get(connectionId: string, fileId: string): Promise<Passthru> {
        const url = this.parser.url('/backend/file/:connection_id/:file_id', {
            'connection_id': connectionId,
            'file_id': fileId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as Passthru;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns all available files on the filesystem connection
     *
     * @returns {Promise<BackendFileCollection>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async getAll(connectionId: string, startIndex?: number, count?: number): Promise<BackendFileCollection> {
        const url = this.parser.url('/backend/file/:connection_id', {
            'connection_id': connectionId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'startIndex': startIndex,
                'count': count,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BackendFileCollection;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Updates an existing file on the filesystem connection
     *
     * @returns {Promise<CommonMessage>}
     * @throws {CommonMessageException}
     * @throws {ClientException}
     */
    public async update(connectionId: string, fileId: string, payload: FormData): Promise<CommonMessage> {
        const url = this.parser.url('/backend/file/:connection_id/:file_id', {
            'connection_id': connectionId,
            'file_id': fileId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'PUT',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as CommonMessage;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new CommonMessageException(await response.json() as CommonMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }



}
